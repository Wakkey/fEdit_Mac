unit functionunit;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, FileUtil, Forms, Controls, Graphics, Dialogs, StdCtrls,
  edit, Process;

type
   TeditList = class(TList)
  private
    function Get(Index: Integer): Teditfrm;
    procedure Put(Index: Integer; const Value: Teditfrm);
  public
    property Items[Index: Integer]: Teditfrm read Get write Put; default;
     destructor Destroy; override;
  end;
  { Tfunction_unit }

  Tfunction_unit = class(TForm)
    procedure FormCreate(Sender: TObject);
  private
    { private declarations }
  public
    { public declarations }
    editlist:Teditlist;
    TitleName:string;
    charset_new:string;
    Listset:array[0..255] of TStringList;
    function set_char(i:integer;s:string):string;
    function window_off(i:integer):boolean;
    function newwindow(count:integer):boolean;
    function newedit(i:integer):boolean;

    function Utf8ToAnsi_sh(i:integer;filename:String):boolean;

    function filesOpen:boolean;
    function open(i:integer;s:string):boolean;
    function save(i:integer):boolean;
    function saveas(i:integer):boolean;
    function AllSave:boolean;
    function AllSaveAs:boolean;

    function edit_contlorl(s:String;tab:integer):boolean;

    function findtext(fText:string;setText,get_text:TStringList;setfind:integer):boolean;
    function find1page(i: integer):boolean;
    function findallpage: boolean;
    function TXTReplace:boolean;
    function selselect(i:integer): boolean;

    function chingSize(i:integer):boolean;
    function frmpsnset(count:integer):boolean;
    function resizedocwindow(count:integer):boolean;
    function resizewindow2:boolean;
    function changtabset(i:integer):boolean;
    function closeTab(i:integer):boolean;
    function closeAllTab:boolean;

    function chengingtab(i:integer):boolean;

    function chengtab(i1:integer):boolean;

    function reprace_macro(s,find,reprace:string;count:integer):boolean;

  end;

var
  function_unit: Tfunction_unit;

implementation

uses Main,compunit,find;

{$R *.lfm}

{ Tfunction_unit }
function UTF8ToUTF16(const S: AnsiString):WIdeString;
begin
  UTF8ToUTF16 := s;
end;

function UTF16ToUTF8(const S: WIdeString):AnsiString;
begin
  UTF16ToUTF8 := s;
end;

function TFunction_unit.Utf8ToAnsi_sh(i:integer;filename:String):boolean;
var
  Process:TProcess;
  setFile: string;
begin
  setfile := ExtractFilePath( Paramstr(0) ) + 'tmp.txt';

  Process := TProcess.Create(nil);
  Process.Options := [poUsePipes, poStderrToOutPut];


  Process.Commandline := 'sh -c "piconv -f sjis -t utf8 ' + filename + ' > ' + setfile + '"';
  Process.Execute;
  if Process.Running then begin
  //sleep(100);
  function_unit.editlist[ i ].lines_tmp.LoadFromFile( setfile );
  function_unit.editlist.Items[ i ].SynMemo1.Lines.Text:= function_unit.editlist[ i ].lines_tmp.Text;
  end;
  Process.Commandline := 'sh -c "rm ' + setfile + '"';
  Process.Execute;
  Process.Free;

end;

function Tfunction_unit.set_char(i:integer;s:string):string;
begin
  function_unit.charset_new:= s;
  if  s = 'Ansi' then begin
    mainform.Menu_Ansi.Checked:=true;
    mainform.Menu_UTF8_Ansi.Checked:=false;
    mainform.Menu_UTF16.Checked:=false;
  end else if s = 'Utf8' then begin
    mainform.Menu_Ansi.Checked:=false;
    mainform.Menu_UTF8_Ansi.Checked:=true;
    mainform.Menu_UTF16.Checked:=false;
  end else if s = 'Utf8' then begin
    mainform.Menu_Ansi.Checked:=false;
    mainform.Menu_UTF8_Ansi.Checked:=false;
    mainform.Menu_UTF16.Checked:=true;
  end;
  if i = -1 then begin
    exit;
  end;
  if s = '?' then begin
    set_char := function_unit.editlist.Items[i].charset
  end;
  function_unit.editlist.Items[i].charset:= s;
end;

procedure Tfunction_unit.FormCreate(Sender: TObject);
begin
  editlist := TeditList.Create;
  editlist.clear;
  function_unit.charset_new:= 'Utf8';
  TitleName := 'fEdit 0.10 ';
end;


function TeditList.Get(Index: Integer): Teditfrm;
begin
  Result :=  Teditfrm( inherited Get(Index) );
end;

procedure TeditList.Put(Index: Integer; const Value: Teditfrm);
begin
  inherited Put( Index, Value );
end;

destructor TeditList.Destroy;
var
  i: Integer;
begin
  for i := 0 to Self.Count - 1 do
    Self.Items[i].Free;
  inherited Destroy;
end;

function Tfunction_unit.window_off(i:integer):boolean;
begin
   try
      with editlist.Items[i] do begin
        DragMode := dmAutomatic;//dmManual;
        DragKind := dkDock;//dkDrag;
        ManualDock(MainForm);
        ManualDock(MainForm.EditDockPanel);
        BorderStyle:= bsnone;
        //function_unit.resizedocwindow;
      end;
   except
   end;
end;

function Tfunction_unit.chingSize(i:integer):boolean;
begin
  if i = -1 then
    exit;
  if MainForm.Height <> screen.Height then
    if MainForm.Width <> screen.Width then
      function_unit.frmpsnset(i);
  function_unit.resizewindow2;
end;

function Tfunction_unit.newwindow(count:integer):boolean;
begin
  editlist.add(Teditfrm);
  editlist.Items[count] := Teditfrm.Create(self);
  editlist.Items[count].filename_path:= 'new' + inttostr(count);
  mainform.TabControl1.Tabs.Insert(count,'');
  mainform.TabControl1.Tabs[count] := editlist.Items[count].filename_path;

  editlist.Items[count].Visible:= false;
  editlist.Items[count].SynMemo1.Lines.Clear;
  //function_unit.write_names(count,'NewFile' + inttostr(MainForm.count_new));
  //MainForm.Caption:= editname + function_unit.coll_filename(count) + ']';
  //MainForm.TabControl1.Tabs.Add(function_unit.coll_filename(count));
  //MainForm.TabControl1.TabIndex := count;
  //function_unit.write_saves(count,false);
  with editlist.Items[count] do
  begin
    DragMode := dmAutomatic;
    //Caption := utf8tosys(ExtractFileName(function_unit.coll_filename(count)));
    //No := count;
    //function_unit.write_saves(count,False);
    //MainForm.Caption := editname + utf8tosys(function_unit.coll_filename(count)) + ']';
    Show;

    editlist.Items[count].Top := MainForm.Top {+ MainForm.Height} + 20;
    editlist.Items[count].Left := MainForm.Left;
    editlist.Items[count].Width := MainForm.Width;
    editlist.Items[count].Height:= mainform.Height;
    WindowState:= wsNormal;
    //editfrm[count].SynMemo1.ScrollBars:= ssBoth;
    //inc(MainForm.count_new);
  end;
end;

function Tfunction_unit.newedit(i:integer):boolean;
begin
  function_unit.newwindow(i);
  function_unit.window_off(i);
  mainform.TabControl1.TabIndex:= i;
  //function_unit.chengtab(i);
   //mainform.tabclicks := true;
   function_unit.resizewindow2;
end;

function Tfunction_unit.filesOpen:boolean;
var
  i,i1:integer;
begin
  if not comp_unit.OpenDialog1.Execute then
    exit;

  for i1 := 0 to comp_unit.OpenDialog1.Files.Count -1 do begin;
    i := function_unit.editlist.Count;
    function_unit.newedit( i );
    function_unit.editlist[ i ].filename_path:= comp_unit.OpenDialog1.Files[i1];
    mainform.TabControl1.Tabs[ i ] :=  ExtractFileName( function_unit.editlist.Items[ i ].filename_path );
    mainform.Caption:= function_unit.TitleName + '[' + function_unit.editlist.Items[ i ].filename_path + ']';
    function_unit.open( i, comp_unit.OpenDialog1.Files[i1]);
  end;
end;

function Tfunction_unit.open(i:integer;s:string):boolean;
begin

  if function_unit.editlist.Items[i].charset = '' then begin
    function_unit.editlist.Items[i].charset := function_unit.charset_new;
  end;
  if function_unit.editlist.Items[i].charset = 'Ansi' then begin
     function_unit.Utf8ToAnsi_sh( i, s );

  end else if function_unit.editlist.Items[i].charset = 'Utf8' then begin
    function_unit.editlist[ i ].lines_tmp.LoadFromFile( s );
    function_unit.editlist.Items[ i ].SynMemo1.Lines.Text:= (function_unit.editlist[ i ].lines_tmp.Text);
  end else if function_unit.editlist.Items[i].charset = 'Utf16' then begin
    function_unit.editlist[ i ].lines_tmp.LoadFromFile( s );
    function_unit.editlist.Items[ i ].SynMemo1.Lines.Text:= Utf8toUtf16(function_unit.editlist[ i ].lines_tmp.Text);
  end;
end;

function Tfunction_unit.save(i:integer):boolean;
var
  s:string;
begin
  s := function_unit.set_char(i,'?');
  with function_unit.editlist.Items[i] do begin
    if not memo1.Visible then begin
      if s = 'Ansi' then begin
        lines_tmp.Text := Utf8toAnsi(SynMemo1.Text);
      end else if s = 'Utf8' then begin
        lines_tmp.Text := (SynMemo1.Text);
      end else if s = 'Utf16' then begin
        lines_tmp.Text := Utf8toUtf16(SynMemo1.Text);
      end;
    end else begin
      if s = 'Ansi' then begin
        lines_tmp.Text := Utf8toAnsi(Memo1.Text);
      end else if s = 'Utf8' then begin
        lines_tmp.Text := (Memo1.Text);
      end else if s = 'Utf16' then begin
        lines_tmp.Text := Utf8toUtf16(Memo1.Text);
      end;
    end;
    lines_tmp.SaveToFile(filename_path);
  end;
end;

function Tfunction_unit.saveas(i:integer):boolean;
begin
  if not comp_unit.SaveDialog1.Execute then
     exit;
  function_unit.editlist.Items[i].filename_path:= comp_unit.SaveDialog1.FileName;
  function_unit.save(i);
end;

function Tfunction_unit.AllSave:boolean;
var
  i:integer;
begin
  for i :=0 to function_unit.editlist.Count -1 do begin
    function_unit.save(i);
  end;
end;

function Tfunction_unit.AllSaveAs:boolean;
var
  i:integer;
begin
  for i :=0 to function_unit.editlist.Count -1 do begin
    function_unit.saveas(i);
  end;
end;

function Tfunction_unit.edit_contlorl(s:String;tab:integer):boolean;
var
  i,i1:integer;
begin
  if tab = -1 then
    exit;
  if s = 'undo' then begin
    i := 0;
  end else if s = 'redo' then begin
    i := 1;
  end else if s = 'cut' then begin
    i := 2;
  end else if s = 'copy' then begin
    i := 3;
  end else if s = 'past' then begin
    i := 4;
  end else if s = 'all' then begin
    i := 5;
  end else if s = 'day' then begin
    i := 6;
  end else if s = 'time' then begin
    i := 7;
  end else if s = 'calac' then begin
    i := 8;
  end else
   i := 99;
  with function_unit.editlist.Items[tab] do begin
    case i of
      0:begin
        if memo1.Visible then begin
          memo1.Undo;
        end else begin
          SynMemo1.Undo;
        end;
      end;
      1:begin
        if memo1.Visible then begin
          memo1.Undo;
        end else begin
          SynMemo1.Redo;
        end;
      end;
      2:begin
        if memo1.Visible then begin
          memo1.CutToClipboard;
        end else begin
          SynMemo1.CutToClipboard;
        end;
      end;
      3:begin
        if memo1.Visible then begin
          memo1.CopyToClipboard;
        end else begin
          SynMemo1.CopyToClipboard;
        end;
      end;
      4:begin
        if memo1.Visible then begin
          memo1.PasteFromClipboard;
        end else begin
          SynMemo1.PasteFromClipboard;
        end;
      end;
      5:begin
        if memo1.Visible then begin
          memo1.SelectAll;
        end else begin
          SynMemo1.SelectAll;
        end;
      end;
      6:begin
        if memo1.Visible then begin
          i1 := Memo1.CaretPos.Y -1;
          Memo1.Lines.Insert(i1,datetostr(now));
        end else begin
          i1 := SynMemo1.CaretY -1;
          SynMemo1.Lines.Insert(i1,datetostr(now));
        end;
      end;
      7:begin
        if memo1.Visible then begin
          i1 := Memo1.CaretPos.Y -1;
            //SendMessage(editfrm[i].Memo.Handle, EM_LINEFROMCHAR, editfrm[i].Memo.SelStart, 0);
          Memo1.Lines.Insert(i1,timetostr(now));
        end else begin
          i1 := SynMemo1.CaretY -1;
          SynMemo1.Lines.Insert(i1,timetostr(now));
        end;
      end;

      8:begin
        if not comp_unit.CalculatorDialog1.Execute then
          exit;
          if memo1.Visible then begin
            i1 := Memo1.CaretPos.Y -1;
            //SendMessage(editfrm[i].Memo.Handle, EM_LINEFROMCHAR, editfrm[i].Memo.SelStart, 0);
            Memo1.Lines.Insert(i1,floattostr(comp_unit.CalculatorDialog1.Value));

          end else begin
            i1 := SynMemo1.CaretY -1;
            SynMemo1.Lines.Insert(i1,floattostr(comp_unit.CalculatorDialog1.Value));
          end;
      end;
      99:begin
        showmessage('this command is not faund ' + '"'+ s +'"');
      end;
    end;
  end;
end;

function Tfunction_unit.find1page(i: integer): boolean;
var
  s,s1:TstringList;
  setfile0,setfile1,setfile2:string;
  i1:integer;
begin
  s := TstringList.Create;
  s1 := TstringList.Create;
  s.Clear;
  s1.Clear;
      MainForm.TabControl1.TabIndex:= i;
      with function_unit.editlist.Items[i] do begin
        if not Memo1.Visible then begin
          SynMemo1.SelEnd:= length(SynMemo1.Lines.Text);
          s1.Text:= SynMemo1.SelText;
          SynMemo1.SelEnd := SynMemo1.SelStart;
        end else begin
          Memo1.SelLength := Memo1.SelStart - length(Memo1.Lines.Text);
          s1.Text:= Memo1.SelText;
        end;

        if not find_form.ChekChar.Checked then begin
          try
            if not Memo1.Visible then begin
              s1.Text:= LowerCase(SynMemo1.Lines.Text);
            end else begin
              s1.Text:= LowerCase(Memo1.Lines.Text);
            end;
            find_form.FIndTextAlia.Text := LowerCase(find_form.FIndTextAlia.Text);
          finally
          end;
        end else begin
        try
          if not Memo1.Visible then begin
            s1.Text:= (SynMemo1.Lines.Text);
          end else begin
            s1.Text:= (Memo1.Lines.Text);
          end;
          find_form.FIndTextAlia.Text := (find_form.FIndTextAlia.Text);
        finally
        end;
      end;
    end;
       findtext(find_form.FIndTextAlia.Text,s1,s,0);
      if s.Text <> '' then begin
        find_form.listset(i,s);
        find_form.ListBox2.Items.Add(MainForm.TabControl1.Tabs[i]);
        find_form.listallload(i,find_form.FindList);
        //find_form.ListBox1.Items := find_form.FindList;  //DebugCode
        for i1 := 0 to FInd_form.FindList.count -1 do begin
          find_form.ListBox1.Items.Add(inttostr(i1));
        end;
        find_form.Memo1.Lines.Add(IntToStr(i +1));
      end;

    s.Free;
    s1.Free;
    if find_form.ListBox1.Items.Count > 0 then
      find_form.ListBox1.ItemIndex:= -1;
end;

function Tfunction_unit.findtext(fText:string;setText,get_text:TStringList;setfind:integer):boolean;
var
  s:Tstringlist;
  s1:string;
  i,i1,i2,i4:integer;
  memo:Tmemo;
  function findword:boolean;
  var
    i3:integer;
  begin
    i := ansipos(ftext,s[i1]);
    if i = 0 then begin
      findword := false
    end
    else begin
      i4 := 0;
      for i3 := 0 to i1 -1 do begin
        i4 := i4 + length(s[i3]) + 1;//Windows=2; MacOSX+1;
      end;
      i4 := i4 + i;
      get_text.Add(inttostr(i4));
      findword := true;
    end;
  end;
begin
  //findtext.Free;
  s:=TStringlist.Create;
  s.Clear;
  memo:=Tmemo.Create(MainForm);
  memo.Visible := false;
  memo.Parent := MainForm;
  //function_unit.Show;
  memo.Text := settext.Text;
  s.Text:=settext.Text;
  i := -1;
  i1 := 0;
  for i1 := 0 to s.Count -1 do begin;
    if findword then begin
      s1 := s[i1];
      for i2 := i to length(s1) do begin
        s1[i] := ' ';
      end;
      s[i1] := s1;
    end;
  end;
  memo.Free;
  s.Free;
end;

function Tfunction_unit.findallpage: boolean;
var
  i:integer;
begin
  find_form.Memo1.Clear;
  for i := 0 to MainForm.TabControl1.Tabs.Count -1 do begin
    find1page(i);
    function_unit.Listset[i].Text:= find_form.FindList.Text;
    //chekfinds;
  end;
  find_form.ListBox2.ItemIndex:= find_form.ListBox2.Items.Count -1;

end;

function Tfunction_unit.TXTReplace: boolean;
var
  i:integer;
  msg:string;
  i1:integer;
begin
    i1 := MainForm.TabControl1.TabIndex;
  msg  := '文字列を置き換えます' + chr($d) + chr($a) + 'よろしいですか？';
  while 0 <> find_form.ListBox1.Items.Count do begin
    //find_form.listbox1.ItemIndex := i;
    //function_unit.selselect;
    if messagedlg(msg, mtinformation, [mbOk,mbNo,mbCancel], 0) = mrok then begin
      with function_unit.editlist.Items[i1] do begin
        if not memo1.Visible then begin
          synmemo1.SelStart:= strtoint(find_form.FindList[find_form.selectFind]);
          synmemo1.SelEnd:= synmemo1.SelStart + length(find_form.FIndTextAlia.Text);
          SynMemo1.SelText:= find_form.RplaceTextAlia.Text;
         end else begin
           memo1.SelStart:= strtoint(find_form.FindList[find_form.selectFind]) -1;
           memo1.SelLength:= length(find_form.FIndTextAlia.Text);
           Memo1.SelText:= find_form.RplaceTextAlia.Text;
          end;
        end;

        find_form.ListBox2.Items.Clear;
        find_form.ListBox1.ItemIndex := -1;
        find_form.ListBox1.Items.Clear;
        find_form.FindList.Clear;
        function_unit.Listset[i1].Clear;
        function_unit.find1page(i1);
      end else if  messagedlg(msg, mtinformation, [mbOk,mbNo,mbCancel], 0) = 1 then begin
         inc(find_form.selectFind);
      end else if messagedlg(msg, mtinformation, [mbOk,mbNo,mbCancel], 0) = 2 then begin
        break;
      end;


  end;
end;

function Tfunction_unit.selselect(i:integer): boolean;
var
  findpos:integer;
begin
  //MainForm.findpage := StrToInt(color_form.Memo1.Lines[tabset1.TabIndex]);
  findpos := StrToInt(find_form.FindList[find_form.listbox1.ItemIndex]);
  with function_unit.editlist.Items[i] do begin
    if not memo1.Visible then begin
      SynMemo1.SelStart := findpos;
      SynMemo1.selend := findpos + length(find_form.FIndTextAlia.Text);
    end else begin

      memo1.SelStart := findpos -1;
      memo1.SelLength := length(find_form.FIndTextAlia.Text);
    end;
  end;
end;

function TextCheng(i,x,y:integer;find1,find2,reprace1,reprace2:string):boolean;
var
  st,st1,st2,st3,st4:TStringList;
  i1,i2,i3,i4:integer;
  s,s1,s2:string;
begin
  with function_unit.editlist.Items[i].synmemo1 do begin
    //y := SendMessage(Handle, EM_LINEFROMCHAR, SelStart, 0);
    //x := SelStart - SendMessage(Handle, EM_LINEINDEX, y, 0);
    //form1.caption := inttostr(y + 1)+ '行' + inttostr(x)+ '列';

    //if key = 13 then begin
      {if Lines.Text = '' then begin
        Lines[y] :=  Lines[y] + 'chr(13) + ';
        exit;
      end;}
      {if Lines[y -1] = 'chr(13) + ' then begin
        Lines[y] := 'chr(13) ';
        exit;
      end;}
      if Lines[y] <> '' then begin
       // if 0 > (y -1) then begin
          st := tstringlist.Create;
          st.Clear;
          st1 := tstringlist.Create;
          st1.Clear;
          st2 := TStringlist.Create;
          st2.Clear;
          st3 := TStringlist.Create;
          st3.Clear;
          st4 := TStringlist.Create;
          st4.Clear;
          st.Text:= lines[y];
          if find1 <> '' then
            function_unit.findtext(find1,st,st1,x)
          else
            function_unit.findtext(find2,st,st1,x);
          //showmessage(st1.Text);
          s := st.Text;
          if st1.Text <> '' then begin
            if find1 <> '' then begin
              s :=  StringReplace(Lines[y],find1,reprace1,[{rfReplaceAll}]);
              {for i2 := strtoint(st1[0]) to strtoint(st1[0]) + length(find1) do begin
                s[i2] := char(0);
              end;}
            end;
            lines[y] := s;
            if find2 <> '' then begin
              st2.Add(lines[y]);
              //検索して、最後日の検索結果を置き抱える。
              for i1 := 0 to length(lines[y]) do begin
                function_unit.findtext(find2,st2,st4,i1);
                s2 := st4.Text;
                if null <> s2 then
                  st3.Add(s2);
              end;
              showmessage(st3.Text);
              if Lines[y] <> '' then begin
                        s := '';
                        s2 := '';
                        i4 := strtoint(st3[st3.Count-1]);
                        s1 := lines[y];
                        //i2 := ansipos(find2,s1);
                        for i1 := 1 to i4 -1 do begin
                          s2 := s2 + s1[i1];
                        end;
                       // showmessage(s2 + 'e'+ s1 + inttostr(i4));
                        for i1 := i4 to length(s1) do begin
                          s := s + s1[i1];
                        end;
                       // showmessage(s2 + ' ' + s);
                        s := StringReplace(s,find2,reprace2,[{rfReplaceAll}]);
                        //s2 := s2 + s;
                        lines[y] := s2 + s;

                        //showmessage(lines[y]);
                    end;
            end;
          end;



          if (st1.Text <> '') then
            exit;
            //Lines[y] := reprace1 + Lines[y] + reprace2;

          if (reprace1 <> '') or (reprace2 <> '') then
            if ( find1 = '') and ( find2 = '') then
              Lines[y] := reprace1 + Lines[y] + reprace2;

          st.Free;
          st1.Free;
          st2.Free;
          //exit;
       // end;
        {Lines[y] := '+ ''' + Lines[y] + ''' + chr(13)';
        exit;}
      end;
      //Lines[y] :=  Lines[y] + ' + chr(13)';
    end;
  //end;
end;

function TextCheng2(i,x,y:integer;find,reprace,msg:string):integer;
var
  s,s1,s2,s3:string;
  i1,i2:integer;
begin
  with function_unit.editlist.Items[i].SynMemo1 do begin
      if Lines[y-1] <> '' then begin
          s := '';
          s2 := '';
          s1 := lines[y-1];
          i2 := ansipos(find,s1);
          for i1 := 1 to x -1 do begin
            s2 := s2 + s1[i1];
          end;
          for i1 := x to length(s1) do begin
            s := s + s1[i1];
          end;
          //showmessage(s2 + ' ' + s);
          if msg = '中間' then
            s :=  StringReplace(s,find,reprace,[{rfReplaceAll}]);
          if (msg = '指定行') or (msg = '全列全行') then
            s :=  StringReplace(s,find,reprace,[rfReplaceAll]);
          //s2 := s2 + s;
          lines[y-1] := s2 + s;
      end;
    end;
  TextCheng2 := i2;
end;

function Tfunction_unit.reprace_macro(s,find,reprace:string;count:integer):boolean;
var
  i,pos:integer;
  msg:string;
  i1,i2,i3:integer;
  st:TStringList;
begin
  i2 := 0;
  with function_unit.editlist.Items[mainform.TabControl1.TabIndex] do begin
  if s = '先頭' then begin
    while i2 < count do begin
      TextCheng(mainform.TabControl1.TabIndex,0,
        editCaretY + i2 ,find,'',reprace,'');
      inc(i2);
    end;
  end;

  if s = '中間' then begin
    while i2 < count do begin
      i3 := TextCheng2(mainform.TabControl1.TabIndex,
                 editCaretX,
                 editCaretY+ i2 ,
                 find,reprace,
                 s);
      inc(i2);
    end;
    //showmessage(inttostr(i3));
    editCaretX := i3 + 1;
    synmemo1.CaretX:= i3 + 1;
  end;

  if s = '行末' then begin
    while i2 < count do begin
      TextCheng(mainform.TabControl1.TabIndex,0,editCaretY + i2 ,'',find,'',reprace);
      inc(i2);
    end;
  end;

  if s = '指定行' then begin
      TextCheng2(mainform.TabControl1.TabIndex,
                 editCaretX,
                 editCaretY ,
                 find,reprace,
                 s);
  end;

  if s = '全列全行' then begin
      while i2 < SynMemo1.Lines.Count -1 do begin
        TextCheng2(mainform.TabControl1.TabIndex,
                   editCaretX,
                   editCaretY+ i2 ,
                   find,reprace,
                   s);
        inc(i2);
      end;
    end;

  if s = '指定列' then begin
      while i2 < SynMemo1.Lines.Count -1 do begin
        i3 := TextCheng2(mainform.TabControl1.TabIndex,
                   editCaretX,
                   editCaretY+ i2 ,
                   find,reprace,
                   s);
        inc(i2);
      end;
      editCaretX := i3 + 1;
      synmemo1.CaretX:= i3 + 1;
    end;
  end;

  {if s = '' then begin
  i1 := MainForm.TabControl1.TabIndex;
  msg  := '文字列を置き換えます' + chr($d) + chr($a) + 'よろしいですか？';
  st := TStringLIst.Create;
  st.Clear;
  pos := 0;
  while 0 <> count do begin
    //find_form.listbox1.ItemIndex := i;
    function_unit.reprace_selselect(pos,find);
    if messagedlg(msg, mtinformation, [mbOk,mbNo,mbCancel], 0) = mrok then begin
      if not MainForm.Menu_MemoMode.Checked then begin
          editfrm[i1].SynMemo1.SelText:= reprace;
        end else begin
          editfrm[i1].Memo.SelText:= reprace;
        end;
        findtext2(find,i1,st);
        if st.Text <> '' then
          pos := strtoint(st[0]);
      end else if  messagedlg(msg, mtinformation, [mbOk,mbNo,mbCancel], 0) = 1 then begin

      end else if messagedlg(msg, mtinformation, [mbOk,mbNo,mbCancel], 0) = 2 then begin
        st.Free;
        break;
      end;
  end;
  st.Free;
  end;}
end;

function Tfunction_unit.frmpsnset(count:integer):boolean;
begin
  with editlist.Items[count] do begin
    Top := MainForm.Top;
    left:= MainForm.Left;
    width:= MainForm.Width;
    height:= MainForm.Height;
  end;
end;

function Tfunction_unit.changtabset(i:integer):boolean;
begin
  //if MainForm.T_W_sw then begin
    //exit;
  //end;
  //if MainForm.TabControl1.Tabs[i] = 'ADD' then begin
    //Menu_NewClick(Sender);
   // exit;
  //end;
   function_unit.chengtab(i);
   mainform.Caption:= function_unit.TitleName + '[' + function_unit.editlist.Items[ i ].filename_path + ']';
   //mainform.tabclicks := true;
   function_unit.resizewindow2;
end;

function Tfunction_unit.resizedocwindow(count:integer):boolean;
begin
  //if MainForm.count > 0 then
  begin
    //if not MainForm.Menu_MultWindow.Checked then
       begin
      with editlist.Items[count] do begin
      Top:= 0;
      Left:=0;
      Width:= MainForm.EditDockPanel.Width;
      Height:=MainForm.EditDockPanel.Height;
      end;
    end;
  end;
end;


function Tfunction_unit.resizewindow2:boolean;
var
  s:string;
begin
  {if MainForm.Menu_MultWindow.Checked then begin
    s := function_unit.toolbaraligin('?');
    if (s = 'top') or (s = 'bottom') then begin
      MainForm.TabControl1.Height:= 60;
      MainForm.winmodeheight:= MainForm.toolbar2.Height + MainForm.PageControl1.Height + MainForm.TabControl1.Height;
      MainForm.Height := MainForm.winmodeheight;
    end;
    if (s = 'left') or (s = 'right') then begin
      MainForm.TabControl1.Width:= 20;
      MainForm.winmodeheight:= 200;//MainForm.toolbar2.Width + MainForm.TabControl1.Width;
      MainForm.Width := MainForm.winmodeheight;
    end;

  end else }begin
     function_unit.resizedocwindow(mainform.TabControl1.TabIndex);
  end;
end;

function Tfunction_unit.closeTab(i:integer):boolean;
begin
  function_unit.editlist.Items[i].Close;
  function_unit.editlist.Delete(i);
  mainform.TabControl1.Tabs.Delete(i);
end;

function Tfunction_unit.closeAllTab:boolean;
var
  i:integer;
begin
  i:= function_unit.editlist.Count;
  while i > 0 do begin
    function_unit.closeTab(0);
    dec(i);
  end;
end;



function Tfunction_unit.chengtab(i1:integer):boolean;
  {function edittypeset(s:string):boolean;
    begin
      if s = '' then begin
        MainForm.Menu_C.Checked:= false;
        MainForm.Menu_Delphi.Checked:= false;
        MainForm.Menu_Pascal.Checked:= false;
        MainForm.Menu_Java.Checked:= false;
        MainForm.MenuI_UnixShell.Checked:= false;
        MainForm.Menu_VBScript.Checked:= false;
        MainForm.Menu_BAT.Checked:= false;
        MainForm.Menu_HTML.Checked:= false;
        MainForm.Menu_XML.Checked:= false;
        MainForm.Menu_Css.Checked:= false;
        MainForm.Menu_INI.Checked:= false;
        MainForm.Menu_lazarus.Checked:= false;
        MainForm.Menu_PHP.Checked:= false;
        MainForm.Menu_Perl.Checked:= false;
        MainForm.Menu_pyhton.Checked:= false;
        MainForm.Menu_FreeHeightLight.Checked:= false;
        MainForm.Menu_SQL.Checked:= false;
        exit;
      end else if s = 'cpp' then begin
        MainForm.Menu_CClick(MainForm.Menu_C);
      end else if s = 'pas' then begin
        MainForm.Menu_DelphiClick(MainForm.Menu_Delphi);
      end else if s = 'fpas' then begin
        MainForm.Menu_PascalClick(MainForm.Menu_Pascal);
      end else if s = 'java' then begin
        MainForm.Menu_JavaClick(MainForm.Menu_Java);
      end else if s = 'chell' then begin
        MainForm.MenuI_UnixShellClick(MainForm.MenuI_UnixShell);
      end else if s = 'vbs' then begin
        MainForm.Menu_VBScriptClick(MainForm.Menu_VBScript);
      end else if s = 'bat' then begin
        MainForm.Menu_BATClick(MainForm.Menu_BAT);
      end else if s = 'html' then begin
        MainForm.Menu_HTMLClick(MainForm.Menu_HTML);
      end else if s = 'xml' then begin
        MainForm.Menu_XMLClick(MainForm.Menu_XML);
      end else if s = 'css' then begin
        MainForm.Menu_CssClick(MainForm.Menu_Css);
      end else if s = 'ini' then begin
        MainForm.Menu_INIClick(MainForm.Menu_INI);
      end else if s = 'laz' then begin
        MainForm.Menu_lazarusClick(MainForm.Menu_lazarus);
      end else if s = 'php' then begin
        MainForm.Menu_PHPClick(MainForm.Menu_PHP);
      end else if s = 'perl' then begin
        MainForm.Menu_PerlClick(MainForm.Menu_Perl);
      end else if s = 'pyhton' then begin
        MainForm.Menu_pyhtonClick(MainForm.Menu_pyhton)
      end else if s = 'any' then begin
        MainForm.Menu_FreeHeightLightClick(MainForm.Menu_FreeHeightLight);
      end else if s = 'sql' then begin
        MainForm.Menu_SQLClick(MainForm.Menu_SQL);
      end else if s = 'tex' then begin

      end else if s = 'lfm' then begin

      end;
    end;}
var
  i:integer;
  {function checks(i1:integer):boolean;
  begin
    if not editfrm[i1].Memo.Visible then begin
      MainForm.Menu_MemoMode.Checked:= false;
      MainForm.Menu_RootHeightLight.Visible:= true;
      //MainForm.Menu_RootSupport.Visible := true;
    end else begin
      MainForm.Menu_MemoMode.Checked:= true;
      MainForm.Menu_RootHeightLight.Visible:= not true;
      //MainForm.Menu_RootSupport.Visible := not true;
    end;
  end;}
begin
  {if  MainForm.T_W_sw then begin
      exit;
  end;
  if editfrm[i1].charsets = 'Ansi' then begin
      mainform.Menu_Ansiclick(mainform.Menu_Ansi);
    end else if editfrm[i1].charsets = 'UTF8' then begin
      mainform.Menu_UTF8_Ansiclick(mainform.Menu_UTF8_Ansi);
    end else if editfrm[i1].charsets = 'UTF16' then begin
      mainform.Menu_UTF16click(mainform.Menu_UTF16)
  end;}
  //if not MainForm.Menu_MultWindow.Checked then
  begin
    for i := 0 to function_unit.editlist.Count -1 do begin
      function_unit.editlist.Items[i].Visible:= false;
    end;
      function_unit.editlist.Items[i1].Visible:=true;
    //checks(i1);
  end;{ else begin
    if editfrm[i1] = nil then
      exit;
    checks(i1);
    function_unit.memopadmode;
    if not editfrm[i1].Memo.Visible then begin
      MainForm.Menu_MemoMode.Checked:= false;
    end else begin
      MainForm.Menu_MemoMode.Checked:= true;
    end;
    //editfrm[i1].memos.Text := editfrm[i1].SynMemo1.Text;
    setActiveWindow(editfrm[i1].Handle);
    editfrm[i1].SynMemo1.Text := editfrm[i1].memos.Text;

    try
      //editfrm[i].SynMemo1.SelStart:= editfrm[i].keepselstart;
    except

    end;
  end;}
  function_unit.resizedocwindow(mainform.TabControl1.TabIndex);
  //form3.OpenDialog1.FileName:= function_unit.coll_filename(i1);
  //form3.SaveDialog1.FileName:= function_unit.coll_filename(i1);
  //MainForm.caption := editname + function_unit.coll_filename(i1) + ']';
  {if editfrm[i1].Memo.Visible then begin
    if not mainform.Menu_MemoMode.Checked then begin

      if not MainForm.Menu_MultWindow.Checked then begin
        MainForm.Menu_RootHeightLight.Visible:= false;
        //MainForm.Menu_RootSupport.Visible := false;
      end;
      mainform.Menu_MemoMode.Checked := true;
      function_unit.memopadmode;
    end;
  end else begin
    if mainform.Menu_MemoMode.Checked then begin

      if not MainForm.Menu_MultWindow.Checked then begin
        MainForm.Menu_RootHeightLight.Visible:= true;
        //MainForm.Menu_RootSupport.Visible := true;
      end;
      mainform.Menu_MemoMode.Checked := false;
      function_unit.memopadmode;
    end;
  end;}
  //edittypeset(editfrm[i1].edittype);
end;

function Tfunction_unit.chengingtab(i:integer):boolean;
begin
  try
    //editfrm[i].memos.Text := editfrm[i].SynMemo1.Text;
    try
      //editfrm[i].keepselstart := editfrm[i].SynMemo1.SelStart;
    except
      //editfrm[i].keepselstart := 0;
    end;
  except

  end;
end;








end.

